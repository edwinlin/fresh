"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _socketConnection = require("./socketConnection.js");

require("regenerator-runtime/runtime");

require("core-js/stable");

// var _cameraIcon = _interopRequireDefault(require("../assets/images/camera-icon.png"));

// var _phoneIcon = _interopRequireDefault(require("../assets/images/phone-icon.png"));

// var _stopIcon = _interopRequireDefault(require("../assets/images/stop-icon.png"));

// var _reactrtc = _interopRequireDefault(require("../assets/images/reactrtc.png"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// console.log('testing here ===>', this.onMessage)
var ReactRTC =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ReactRTC, _React$Component);

  function ReactRTC() {
    var _this;

    _classCallCheck(this, ReactRTC);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactRTC).call(this));
    _this.state = {
      sessionConstraints: {
        video: true,
        audio: false
      },
      localStream: null
    };
    _this.getUserMedia = _this.getUserMedia.bind(_assertThisInitialized(_this));
    _this.handleUserMedia = _this.handleUserMedia.bind(_assertThisInitialized(_this));
    _this.stopStream = _this.stopStream.bind(_assertThisInitialized(_this));
    _this.onIceHandler = _this.onIceHandler.bind(_assertThisInitialized(_this));
    _this.onTrackHandler = _this.onTrackHandler.bind(_assertThisInitialized(_this));
    _this.onNegotiationNeededHandler = _this.onNegotiationNeededHandler.bind(_assertThisInitialized(_this));
    _this.callButtonGetTracks = _this.callButtonGetTracks.bind(_assertThisInitialized(_this));
    _this.socketConnection = new WebSocket('wss://edwintest.localtunnel.me');
    _this.iceServerConfig = {
      iceServers: [{
        urls: 'stun:stun.l.google.com:19302'
      }]
    };
    _this.peerConnection = new RTCPeerConnection(_this.iceServerConfig);
    return _this;
  } // sessionConstraints = {video:true, audio:false}


  _createClass(ReactRTC, [{
    key: "handleUserMedia",
    value: function handleUserMedia(mediaStream) {
      var reactLogo = document.querySelector('.react-rtc__logo');
      reactLogo.style.display = 'none';
      this.setState({
        localStream: mediaStream
      }, function () {
        console.log('hitting setState for handleUserMedia');
      }); // console.log('localstream', this.state.localStream)

      var localVideo = document.querySelector('#localVideo');
      var localStream = this.state.localStream;
      localVideo.srcObject = localStream;
    }
  }, {
    key: "getUserMedia",
    value: function getUserMedia(event) {
      navigator.mediaDevices.getUserMedia(this.state.sessionConstraints).then(this.handleUserMedia)["catch"](function (err) {
        console.error('Err:'.err);
      });
    }
  }, {
    key: "stopStream",
    value: function stopStream(event) {
      var endVideoStream = this.state.localStream.getVideoTracks()[0].stop(); // const endAudioStream = this.state.localStream.getAudioTracks()[0].stop()

      this.setState({
        localStream: endVideoStream
      }); // NOTE: will need to add audio tracks later

      console.log('hitting both endVideoStream'); // this.setState({localStream:endAudioStream})
    }
  }, {
    key: "callButtonGetTracks",
    value: function callButtonGetTracks() {
      var _this2 = this;

      return regeneratorRuntime.async(function callButtonGetTracks$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.log('looking for localStream -->', this.state.localStream);
              _context.next = 3;
              return regeneratorRuntime.awrap(this.state.localStream.getTracks().forEach(function (mediaStreamTrack) {
                console.log('hitting forEach getTracks');

                _this2.peerConnection.addTrack(mediaStreamTrack);
              }));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "onIceHandler",
    value: function onIceHandler(RTCPeerConnectionIceEvent) {
      if (RTCPeerConnectionIceEvent.candidate) {
        var type = RTCPeerConnectionIceEvent.type,
            candidate = RTCPeerConnectionIceEvent.candidate;
        this.socketConnection.send(JSON.stringify({
          type: type,
          candidate: candidate
        }));
      }
    }
  }, {
    key: "onTrackHandler",
    value: function onTrackHandler(event) {
      var remoteVideo = document.querySelector('#remoteVideo');
      remoteVideo.srcObject = new MediaStream([event.track]);
      remoteVideo.style.display = 'block';
    }
  }, {
    key: "onNegotiationNeededHandler",
    value: function onNegotiationNeededHandler(negotiationNeededEvent) {
      var offer;
      return regeneratorRuntime.async(function onNegotiationNeededHandler$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              console.log('hitting onNegotiationNeededHandler');
              _context2.prev = 1;
              _context2.next = 4;
              return regeneratorRuntime.awrap(this.peerConnection.createOffer());

            case 4:
              offer = _context2.sent;
              console.log('offer is about to be created before sending');
              _context2.next = 8;
              return regeneratorRuntime.awrap(this.peerConnection.setLocalDescription(offer));

            case 8:
              console.log('About to send data');
              this.socketConnection.send(JSON.stringify(this.peerConnection.localDescription));
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](1);
              console.error('ERROR:', _context2.t0);

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[1, 12]]);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      this.socketConnection.onopen = function () {
        console.log('connected');
      };

      this.socketConnection.onmessage = function (event) {
        console.log('event', event); // console.log('eventdata', JSON.parse(event.data))
        // testing = OnMessage()
        // console.log('hitting')

        var messageData = JSON.parse(event.data);
        console.log('messageData', messageData);
        (0, _socketConnection.onMessage)(messageData, _this3.peerConnection, _this3.socketConnection, _this3.state.sessionConstraints);
      };

      this.socketConnection.onclose = function (event) {
        // console.log('Socket is closed. Reconnecting will be attempted in 1 second', event.reason);
        // setTimeout(()=>{
        //   connect();
        // },1000)
        console.log('outside reconnect');
      };

      this.socketConnection.onerror = function (err) {
        console.error('Socket encountered this error ==>', err.message, 'Closing socket');
      };
    }
  }, {
    key: "render",
    value: function render() {
      // move these to componentDidmount
      this.peerConnection.onicecandidate = this.onIceHandler;
      this.peerConnection.ontrack = this.onTrackHandler;
      this.peerConnection.onnegotiationneeded = this.onNegotiationNeededHandler;
      return _react["default"].createElement("div", {
        className: "react-rtc"
      }, "Hii", _react["default"].createElement("div", {
        className: "videoContainer"
      }, _react["default"].createElement("img", {
        className: "react-rtc__logo",
        src: _reactrtc["default"],
        alt: ""
      }), _react["default"].createElement("video", {
        id: "localVideo",
        autoPlay: true
      }), _react["default"].createElement("video", {
        id: "remoteVideo",
        autoPlay: true
      })), _react["default"].createElement("section", {
        className: "button-container"
      }, _react["default"].createElement("div", {
        className: "button button--start-color",
        onClick: this.getUserMedia
      }, _react["default"].createElement("img", {
        className: "icon icon--start",
        src: _cameraIcon["default"],
        alt: ""
      })), _react["default"].createElement("div", {
        className: "button button--stop-color",
        onClick: this.stopStream
      }, _react["default"].createElement("img", {
        className: "icon icon--stop",
        src: _stopIcon["default"]
      })), _react["default"].createElement("div", {
        className: "button button--call-color",
        onClick: this.callButtonGetTracks
      }, _react["default"].createElement("img", {
        className: "icon icon--call",
        src: _phoneIcon["default"]
      }))));
    }
  }]);

  return ReactRTC;
}(_react["default"].Component);

var _default = ReactRTC;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,