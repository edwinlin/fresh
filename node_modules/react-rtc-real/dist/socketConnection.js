"use strict";

// we will need to add custom url to WS arg
// class SocketConnectionMethods {
// const async socketConnectionFunc = () => {
// check if it needs to be static
module.exports = {
  onMessage: function onMessage(parsedData, peerConnection, socketConnection, sessionConstraints) {
    var localUserStream, answer;
    return regeneratorRuntime.async(function onMessage$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            //  console.log('parsedData.type: ', parsedData.type)
            // console.log('receiving data from signaling server aka WebSockets', data);
            // const parsedData = JSON.parse(data.data);
            console.log('parsed data var', parsedData);
            _context.prev = 1;

            if (!parsedData.type) {
              _context.next = 32;
              break;
            }

            console.log('parsedData.type: ', parsedData.type);
            _context.t0 = parsedData.type;
            _context.next = _context.t0 === 'offer' ? 7 : _context.t0 === 'answer' ? 22 : _context.t0 === 'icecandidate' ? 26 : 29;
            break;

          case 7:
            console.log('Offer has been recieved');
            _context.next = 10;
            return regeneratorRuntime.awrap(peerConnection.setRemoteDescription(parsedData));

          case 10:
            _context.next = 12;
            return regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia(sessionConstraints));

          case 12:
            localUserStream = _context.sent;
            localUserStream.getTracks().forEach(function (track) {
              peerConnection.addTrack(track, localUserStream);
            });
            _context.next = 16;
            return regeneratorRuntime.awrap(peerConnection.createAnswer());

          case 16:
            answer = _context.sent;
            console.log('Answer is being created');
            _context.next = 20;
            return regeneratorRuntime.awrap(peerConnection.setLocalDescription(answer));

          case 20:
            socketConnection.send(JSON.stringify(peerConnection.localDescription));
            return _context.abrupt("break", 30);

          case 22:
            console.log('Answer has been recieved');
            _context.next = 25;
            return regeneratorRuntime.awrap(peerConnection.setRemoteDescription(parsedData));

          case 25:
            return _context.abrupt("break", 30);

          case 26:
            _context.next = 28;
            return regeneratorRuntime.awrap(peerConnection.addIceCandidate(parsedData.candidate));

          case 28:
            return _context.abrupt("break", 30);

          case 29:
            console.error('Unsupported SDP type');

          case 30:
            _context.next = 33;
            break;

          case 32:
            if (parsedData.text) {} // chatBox.innerHTML += `<li>${parsedData.text}</li>`;
            // console.log('hi user number ', userID);
            // else if (parsedData.userID) userID = parsedData.userID;


          case 33:
            _context.next = 38;
            break;

          case 35:
            _context.prev = 35;
            _context.t1 = _context["catch"](1);
            console.error('ERROR: ', _context.t1);

          case 38:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[1, 35]]);
  } //    onMessage(data, peerConnection, socketConnection) {
  //     console.log('receiving data from signaling server aka WebSockets');
  //     const parsedData = JSON.parse(data);
  //     try {
  //       if (parsedData.type) {
  //         switch (parsedData.type) {
  //           case 'offer':
  //             console.log('Offer has been recieved');
  //             await peerConnection.setRemoteDescription(parsedData);
  //             const localUserStream = await navigator.mediaDevices.getUserMedia(
  //               sessionConstraints
  //             );
  //             localUserStream.getTracks().forEach(track => {
  //               peerConnection.addTrack(track, localUserStream);
  //             });
  //             const answer = await peerConnection.createAnswer();
  //             await peerConnection.setLocalDescription(answer);
  //             socketConnection.send(
  //               JSON.stringify(peerConnection.localDescription)
  //             );
  //             break;
  //           case 'answer':
  //             console.log('Answer has been recieved');
  //             await peerConnection.setRemoteDescription(parsedData);
  //             break;
  //           case 'icecandidate':
  //             await peerConnection.addIceCandidate(parsedData.candidate);
  //             break;
  //           default:
  //             console.error('Unsupported SDP type');
  //         }
  //       } else if (parsedData.text) {
  //         chatBox.innerHTML += `<li>${parsedData.text}</li>`;
  //         console.log('hi user number ', userID);
  //       } else if (parsedData.userID) userID = parsedData.userID;
  //     } catch (err) {
  //       console.error('ERROR: ', err);
  //     }
  //   }
  // }
  // export default onMessage;

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,